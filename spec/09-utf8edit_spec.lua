describe("UTF8EditLine:", function()
  local utf8edit, UTF8EditLine

  before_each(function()
    utf8edit = require("terminal.text.utf8edit")
    UTF8EditLine = utf8edit.UTF8EditLine
  end)

  after_each(function()
    utf8edit = nil
    UTF8EditLine = nil
  end)

  describe("init()", function()
    it("initializes with an empty string", function()
      local line = UTF8EditLine()
      assert.are.equal("", tostring(line))
    end)

    it("initializes with a given string", function()
      local line = UTF8EditLine("hello")
      assert.are.equal("hello", tostring(line))
    end)

    it("initializes with a UTF-8 string", function()
      local line = UTF8EditLine("こんにちは")
      assert.are.equal("こんにちは", tostring(line))
    end)
  end)

  describe("add()", function()
    it("adds a character to the line", function()
      local line = UTF8EditLine("he")
      line:add("l")
      assert.are.equal("hel", tostring(line))
    end)

    it("adds a UTF-8 character to the line", function()
      local line = UTF8EditLine("你")
      line:add("好")
      assert.are.equal("你好", tostring(line))
    end)
  end)

  describe("complex string edits", function()
    it("handles left and right cursor movements", function()
      local line = UTF8EditLine("hello")
      line:left()
      line:left()
      line:add("!")
      assert.are.equal(5, line.ocursor)
      assert.are.equal("hel!lo", tostring(line))
    end)

    it("handles left and right cursor movements with UTF-8", function()
      local line = UTF8EditLine("你好世界")
      line:left()
      line:left()
      line:add("！")
      assert.are.equal(7, line.ocursor)
      assert.are.equal("你好！世界", tostring(line))
    end)

    it("handles backspace correctly", function()
      local line = UTF8EditLine("hello")
      line:left()
      line:left()
      line:backspace()
      assert.are.equal(3, line.ocursor)
      assert.are.equal("helo", tostring(line))
    end)

    it("handles backspace correctly with UTF-8", function()
      local line = UTF8EditLine("你好世界")
      line:left()
      line:left()
      line:backspace()
      assert.are.equal(3, line.ocursor)
      assert.are.equal("你世界", tostring(line))
    end)

    it("handles delete correctly", function()
      local line = UTF8EditLine("hello")
      line:left()
      line:left()
      line:delete()
      assert.are.equal(4, line.ocursor)
      assert.are.equal("helo", tostring(line))
    end)

    it("handles delete correctly with UTF-8", function()
      local line = UTF8EditLine("你好世界")
      line:left()
      line:left()
      line:delete()
      assert.are.equal("你好界", tostring(line))
      assert.are.equal(5, line.ocursor)
    end)

    it("handles a sequence of edits", function()
      local line = UTF8EditLine("hello")
      line:left()
      line:left()
      line:backspace()
      line:add("y")
      line:right()
      line:add("!")
      assert.are.equal(6, line.ocursor)
      assert.are.equal("heyl!o", tostring(line))
    end)

    it("handles a sequence of edits with UTF-8", function()
      local line = UTF8EditLine("你好世界")
      line:left()
      line:left()
      line:backspace()
      line:add("a")
      line:right()
      line:add("！")
      assert.are.equal(8, line.ocursor)
      assert.are.equal("你a世！界", tostring(line))
    end)

    it("handles spamming of keys", function()
      local line = UTF8EditLine("你好世界")
      line:left()
      line:left()
      line:left()
      line:left()
      line:left()
      line:left()
      line:left()
      line:left()
      line:left()
      line:left()
      line:backspace()
      line:backspace()
      line:backspace()
      assert.are.equal(1, line.ocursor)
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:right()
      line:delete()
      line:delete()
      line:delete()
      assert.are.equal(9, line.ocursor)
      assert.are.equal("你好世界", tostring(line))
    end)
  end)
end)
